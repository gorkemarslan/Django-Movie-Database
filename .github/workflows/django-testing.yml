# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Django Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.5
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
          # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Coverage report
      env:
        DEBUG: ${{ secrets.DEBUG }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      run: |
        pip install coverage
        coverage run manage.py test
        coverage report
    - name: Django Testing
      env:
        DEBUG: ${{ secrets.DEBUG }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      run: |
        python manage.py test
    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh/github-actions-ssh
        echo "$SSH_PRIVATE_KEY" > ../private.key
        sudo chmod 600 ../private.key
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        SSH_KEY_PATH: ${{ github.workspace }}/../private.key
    - name: AWS SSM Send Command
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION_NAME }}
        instance-ids: ${{ secrets.INSTANCE_ID  }}
        comment: Deploy the main branch
        working-directory: ${{ secrets.PROJECT_DIR }}
        command: /bin/sh ./deploy.sh
    # Catch SSM outputs
    - name: Get the outputs
      run: echo "The Command id is ${{ steps.ssm.outputs.command-id }}"
